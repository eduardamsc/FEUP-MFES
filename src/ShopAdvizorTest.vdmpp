class ShopAdvizorTest
 instance variables
 
 values
 	private admin : User = new User("admin", "admin", <Admin>);
  
 operations
	 private assertTrue: bool ==> ()
	 assertTrue(cond) == return
	 pre cond;
	
	 public testAddProductToRetailer: () ==> ()
	 testAddProductToRetailer() ==
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
	 	dcl brand : Brand := new Brand("Chip Mix");
	 	dcl product : Product := new Product("Bolachas", "Bolachas de Chocolate", brand);
	 	dcl info : Retailer`ItemInfo := mk_Retailer`ItemInfo(20, 2.1);
	 	dcl retailer : Retailer := new Retailer("Pingo Doce");
	 	dcl user : User := new User("Pingo Doce", "pingo_doce", <Retailer>);
		shopAdvizor.insertUser(admin);
		assertTrue(shopAdvizor.login("admin", "admin") = admin);
	 	shopAdvizor.insertUser(user);
	 	shopAdvizor.insertBrand(brand);
	 	shopAdvizor.insertProduct(product);
	 	shopAdvizor.insertRetailer(retailer);
	 	shopAdvizor.logout();
	 	assertTrue(shopAdvizor.login("Pingo Doce", "pingo_doce") = user);
	 	assertTrue(shopAdvizor.insertProductToRetailer("Pingo Azedo", "Bolachas", "Chip Mix", info.stock, info.price) = nil);
	 	assertTrue(shopAdvizor.insertProductToRetailer("Pingo Doce", "Bolachas", "Oreo", info.stock, info.price) = nil);
	 	assertTrue(shopAdvizor.insertProductToRetailer("Pingo Doce", "Detergente da Roupa", "Chip Mix", info.stock, info.price) = nil);
	 	assertTrue(shopAdvizor.insertProductToRetailer("Pingo Doce", "Bolachas", "Chip Mix", info.stock, info.price) = {product |-> info});
	 );
	 
	 public testAverageReviewRating : () ==> ()
	 testAverageReviewRating() == 
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
	 	dcl brand : Brand := new Brand("Chip Mix");
	 	dcl product : Product := new Product("Bolachas", "Bolachas de Chocolate", brand);
	 	dcl u1 : User := new User("u1", "p1");
	 	dcl u2 : User := new User("u2", "p2");
		shopAdvizor.insertUser(admin);
		shopAdvizor.insertUser(u1);
		shopAdvizor.insertUser(u2);
		assertTrue(shopAdvizor.login("admin", "admin") = admin);
		
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = nil);
		shopAdvizor.insertBrand(brand);
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = nil);
		shopAdvizor.insertProduct(product);
	 	
	 	shopAdvizor.logout();
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = nil);
		assertTrue(shopAdvizor.login("u1", "p1") = u1); -- Insert review with user u1
	 	assertTrue(shopAdvizor.insertReview("Bolachas", "Oreos", 1, "mau") = false); -- Oreos does not exist
	 	assertTrue(shopAdvizor.insertReview("Bolachas", "Chip Mix", 1, "mau") = true);
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = 1); -- Average of {1} = 1
	 	shopAdvizor.logout();
	 	assertTrue(shopAdvizor.login("u2", "p2") = u2); -- Insert review with user u2
	 	assertTrue(shopAdvizor.insertReview("Ketchup", "Chip Mix", 1, "mau") = false); -- Chip Mix does not sell Ketchup
	 	assertTrue(shopAdvizor.insertReview("Bolachas", "Chip Mix", 4, "bom") = true);
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = 2.5); -- Average of {1, 4} = 2.5
	 	
	 	-- Remove review
	 	assertTrue(shopAdvizor.removeReview("Bolachas", "Oreos") = false); -- Oreos does not exist
	 	assertTrue(shopAdvizor.removeReview("Ketchup", "Chip Mix") = false); -- Chip Mix does not sell Ketchup
	 	assertTrue(shopAdvizor.removeReview("Bolachas", "Chip Mix") = true); -- Remove review of user u2
	 	assertTrue(shopAdvizor.getProductAvgRating("Bolachas", "Chip Mix") = 1); -- Average of {1} = 1
	 );
	 
	 public testReviews : () ==> ()
	 testReviews() == 
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
	 	dcl b1 : Brand := new Brand("b1");
	 	dcl b2 : Brand := new Brand("b2");
		dcl p1 : Product := new Product("p1", "pd1", b1);
		dcl p2 : Product := new Product("p2", "pd2", b2);
		dcl u1 : User := new User("n1", "np1");
		dcl u2 : User := new User("n2", "np2");
		shopAdvizor.insertUser(admin);
		assertTrue(shopAdvizor.login("admin", "admin") = admin);
		shopAdvizor.insertBrand(b1);
		shopAdvizor.insertBrand(b2);
		shopAdvizor.insertProduct(p1);
		shopAdvizor.insertProduct(p2);
		shopAdvizor.insertUser(u1);
		shopAdvizor.insertUser(u2);
		
		assertTrue(shopAdvizor.getUserReviews("n3") = nil); -- User n3 is not in the system
		assertTrue(shopAdvizor.getUserReviews("n1") = {}); -- User n1 does not have any reviews
		assertTrue(shopAdvizor.getProductReviews("p3", "b1") = nil); -- Product p3 does not exist
		assertTrue(shopAdvizor.getProductReviews("p1", "b3") = nil); -- Brand b3 does not exist
		assertTrue(shopAdvizor.getProductReviews("p1", "b1") = {|->}); -- Product p3 of brand b3 has no reviews
		
		p1.insertReview(u1, mk_Product`Review(1, "fb1")); -- User1 has a review on Product1
		assertTrue(shopAdvizor.getUserReviews("n1") = { mk_(p1, mk_Product`Review(1, "fb1")) }); 
		assertTrue(shopAdvizor.getProductReviews("p1", "b1") = { u1 |-> mk_Product`Review(1, "fb1") }); 
		p1.insertReview(u2, mk_Product`Review(2, "fb2")); -- User2 has a review on Product1
		assertTrue(shopAdvizor.getUserReviews("n2") = { mk_(p1, mk_Product`Review(2, "fb2")) }); 
		assertTrue(shopAdvizor.getProductReviews("p1", "b1") = { u1 |-> mk_Product`Review(1, "fb1"), u2 |-> mk_Product`Review(2, "fb2") });
		p2.insertReview(u1, mk_Product`Review(5, "fb1")); -- User1 has a review on Product1 and Product2
		assertTrue(shopAdvizor.getUserReviews("n1") = { mk_(p1, mk_Product`Review(1, "fb1")), mk_(p2, mk_Product`Review(5, "fb1")) });
		assertTrue(shopAdvizor.getProductReviews("p2", "b2") = { u1 |-> mk_Product`Review(5, "fb1") }); 
		p2.removeReview(u1);
		assertTrue(shopAdvizor.getProductReviews("p2", "b2") = {|->}); 
	 );
	 
	 public testLogin : () ==> ()
	 testLogin() == 
	 (
 		 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
 		 	dcl u1 : User := new User("user", "pass");
			shopAdvizor.insertUser(u1);
			assertTrue(shopAdvizor.login("user", "123") = nil);
			assertTrue(shopAdvizor.login("123", "pass") = nil);
			assertTrue(shopAdvizor.login("user", "pass") = u1);
			shopAdvizor.logout();
	 );
	 
	 public testLowestPrice : () ==> ()
	 testLowestPrice() == 
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
	 	dcl b1 : Brand := new Brand("b1");
	 	dcl b2 : Brand := new Brand("b2");
		dcl p1 : Product := new Product("p1", "pd1", b1);
		dcl p2 : Product := new Product("p2", "pd2", b1);
		dcl p3 : Product := new Product("p1", "pd3", b2);
		dcl p4 : Product := new Product("p2", "pd4", b2);
		dcl r1 : Retailer := new Retailer("r1");
		dcl r2 : Retailer := new Retailer("r2");
		shopAdvizor.insertUser(admin);
		assertTrue(shopAdvizor.login("admin", "admin") = admin);
		shopAdvizor.insertBrand(b1);
		shopAdvizor.insertBrand(b2);
		shopAdvizor.insertProduct(p1);
		shopAdvizor.insertProduct(p2);
		shopAdvizor.insertProduct(p3);
		shopAdvizor.insertRetailer(r1);
		shopAdvizor.insertRetailer(r2);
		r1.insertProduct(p1, mk_Retailer`ItemInfo(25, 2.5)); -- R1 sells P1 for 2.5
		r1.insertProduct(p2, mk_Retailer`ItemInfo(30, 1.5)); -- R1 sells P2 for 1.5
		r2.insertProduct(p1, mk_Retailer`ItemInfo(25, 2.0)); -- R2 sells P1 for 2.0
		assertTrue(shopAdvizor.getLowestPriceRetailer(p1) = mk_(r2, 2.0));
		assertTrue(shopAdvizor.getLowestPriceRetailer(p2) = mk_(r1, 1.5));
		assertTrue(shopAdvizor.getLowestPriceRetailer(p3) = nil); -- Not sold by any retailer
		assertTrue(shopAdvizor.getLowestPriceRetailer(p4) = nil); -- Not in the system
	 );
	 
	 public testCompetition : () ==> ()
	 testCompetition() == 
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
		dcl u1 : User := new User("u1", "p1");
		dcl u2 : User := new User("u2", "p2");
		dcl u3 : User := new User("u3", "p3");
		dcl bu : User := new User("Oreo", "oreo_pass", <Brand>);
		dcl b : Brand := new Brand("Oreo");
		dcl b2 : Brand := new Brand("ChipMix");
		dcl c : Competition := new Competition("Competitive eating", "Eat as much cookies as possible", 20.0, b);
		dcl c2 : Competition := new Competition("Biggest buyer", "Buy the biggest ammount of cookies", 100.0, b2);
		assertTrue(shopAdvizor.getActivity("Competitive eating") = nil);
		shopAdvizor.insertUser(admin);
		shopAdvizor.insertUser(bu); -- Oreo brand user
		assertTrue(shopAdvizor.login("admin", "admin") = admin); -- Admin has all permissions
		shopAdvizor.insertBrand(b);
		shopAdvizor.insertBrand(b2);
		shopAdvizor.insertUser(u1);
		shopAdvizor.insertUser(u2);
		shopAdvizor.insertUser(u3);
		shopAdvizor.insertActivity(c);
		shopAdvizor.insertActivity(c2);
		
		-- Users can only enter themselves in the competition
		shopAdvizor.logout();
		assertTrue(shopAdvizor.login("u1","p1") = u1);
		shopAdvizor.addCompetitor("Competitive eating");
		shopAdvizor.logout();
		assertTrue(shopAdvizor.login("u2","p2") = u2);
		shopAdvizor.addCompetitor("Competitive eating");
		shopAdvizor.logout();
		assertTrue(shopAdvizor.login("u3","p3") = u3);
		shopAdvizor.addCompetitor("Competitive eating");
		assertTrue(c.m_competitors = {u1, u2, u3});
		
		-- The brand user can start, end and choose the winner of a competition
		shopAdvizor.logout();
		assertTrue(shopAdvizor.login("Oreo","oreo_pass") = bu);
		shopAdvizor.startActivity("Competitive eating");
		shopAdvizor.endActivity("Competitive eating");
		shopAdvizor.chooseWinner("Competitive eating", "u1");
		assertTrue(c.m_winner = u1);
	 );
	 
	 public testIngredients : () ==> ()
	 testIngredients() ==
	 (
	 	dcl shopAdvizor : ShopAdvizor := new ShopAdvizor();
		dcl b : Brand := new Brand("Oreo");
		dcl p : Product := new Product("Cookies", "Chocolate cookies", b);
		p.insertIngredient("milk", mk_Product`Composition(20.0, "ml"));
		p.insertIngredient("chocolate", mk_Product`Composition(50.0, "g"));
		p.insertIngredient("sugar", mk_Product`Composition(5.0, "g"));
		shopAdvizor.insertUser(admin);
		assertTrue(shopAdvizor.login("admin", "admin") = admin);
		shopAdvizor.insertBrand(b);
		shopAdvizor.insertProduct(p);
	 );
	 
	 public static main: () ==> ()
	 main() ==
	 (
	 	dcl test : ShopAdvizorTest := new ShopAdvizorTest();
	 	test.testAddProductToRetailer();
	 	test.testAverageReviewRating();
	 	test.testReviews();
	 	test.testLogin();
	 	test.testLowestPrice();
	 	test.testCompetition();
	 	test.testIngredients();
	 );
	 
end ShopAdvizorTest