class Product
types
	public Id = nat1;
	public String = seq1 of char;
	public Ingredients = set of Substance;
	public Review :: rating: int
								   feedback: seq1 of char;
	
values
-- TODO Define values here

instance variables
	public m_id: Id;
	private static m_next_id : Id := 1;
	public m_name: String;
	public m_description: String;
	public m_brand: Brand;
	public m_ingredients: Ingredients;
	public m_reviews: map User to Review := { |-> };
	
operations
	-- Product constructor
	public Product : String * String * Brand * Ingredients ==> Product
	Product(name, description, brand, ingredients) ==
	(
		m_id := m_next_id;
		m_next_id := m_next_id + 1;
		m_name := name;
		m_description := description;
		m_brand := brand;
		m_ingredients := ingredients;
		return self;
	);

	-- Returns product's id
	public getId : ()  ==> Id
	getId() == return m_id;

	-- Returns product's name
	public getName : ()  ==> String
	getName() == return m_name;

	-- Returns product's description
	public getDescription : ()  ==> String
	getDescription() == return m_description;
	
	-- Returns product's brand
	public getBrand : ()  ==> Brand
	getBrand() == return m_brand;
	
	-- Returns product's ingredients
	public getIngredients : ()  ==> Ingredients
	getIngredients() == return m_ingredients;
	
	--Adds a review and the user who did it to reviews map
	public insertReview : User * Review ==> ()
	insertReview(user, review) ==
	(
		m_reviews := m_reviews ++ {user |-> review}
	)
	pre user not in set dom m_reviews
	post m_reviews = m_reviews~ ++ {user |-> review};
	
	--Adds an ingredient to ingredients set
	public insertIngredient : Substance ==> ()
	insertIngredient(ingredient) ==
	(
		m_ingredients := m_ingredients union {ingredient}
	)
	pre ingredient not in set m_ingredients
	post m_ingredients = m_ingredients~ union {ingredient};

functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Product