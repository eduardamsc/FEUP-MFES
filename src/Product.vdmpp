class Product
types
	public Id = nat1;
	public String = seq1 of char;
	public Composition :: quantity: real
										unit: seq1 of char
										inv c == c.unit in set unitValues;
	public Review :: rating: int
								   feedback: seq1 of char;
	
values
	public unitValues : set of seq1 of char = {"Kg", "g", "l", "ml", "%", "Kcal", "Kj"};
	
instance variables
	public m_id: Id;
	private static m_next_id : Id := 1;
	public m_name: String;
	public m_description: String;
	public m_brand: Brand;
	public m_ingredients: map Substance to Composition;
	public m_reviews: map User to Review;
	
operations
	-- Product constructor
	public Product : String * String * Brand ==> Product
	Product(name, description, brand) ==
	(
		m_id := m_next_id;
		m_next_id := m_next_id + 1;
		m_name := name;
		m_description := description;
		m_brand := brand;
		m_ingredients := { |-> };
		m_reviews := { |-> };
		return self;
	);

	-- Returns product's id
	public getId : ()  ==> Id
	getId() == return m_id;

	-- Returns product's name
	public getName : ()  ==> String
	getName() == return m_name;

	-- Returns product's description
	public getDescription : ()  ==> String
	getDescription() == return m_description;
	
	-- Returns product's brand
	public getBrand : ()  ==> Brand
	getBrand() == return m_brand;
	
	-- Returns product's reviews
	public getReviews : ()  ==> set of Review
	getReviews() == return rng m_reviews;
	
	--Adds a review and the user who did it to reviews map
	public insertReview : User * Review ==> ()
	insertReview(user, review) ==
	(
		m_reviews := m_reviews ++ {user |-> review}
	)
	pre user not in set dom m_reviews
	post m_reviews = m_reviews~ ++ {user |-> review};
	
	--Adds an igredient and its quantity and unit to ingredients map
	public insertIngredient : Substance * Composition ==> ()
	insertIngredient(ingredient, composition) ==
	(
		m_ingredients := m_ingredients ++ {ingredient |-> composition}
	)
	pre ingredient not in set dom m_ingredients
	post m_ingredients = m_ingredients~ ++ {ingredient |-> composition};

functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here

end Product